# Git Documentation

configuration:
  - git config --global user.name "full_name"
  - git config --global user.email "username@email.com"
  - git config --global init.defaultBranch <branch_name>
  - git config --list # checking the configuration file.
  - git <command> --help


tracking:
  - git init # intializing git repository.
  - touch .gitignore # creating ".gitignore" file and put file names in there you don't want to be tracked.
  - git add -A # adding all the files to the staging area, doesn't matter which dir you are on the repo.
  - git reset <filename> # Removing files from staging area. "git reset" with no command will remove every files that are in staging area.
  - git commit -m <message> # commiting files to the git repository.
  - git status # Checking the status of files in local and remote.
  - git log # Checking the previous commits with commit hashes.
  - mkdir <dir_name> # to create a remote path for remote repo.
  - git init --bare # initializing this command on remote directory to make the dir as bare repo.
  - git remote add origin <path> # adding local repo into remote location.
  - git clone </path/repo_name> <location> # cloning a repository from remote location.
  - git remote -v # checking information about the remote location of the repository.
  - git diff # shows defference between previous and new change to the files that hasn't commited or added to staging area.
  - git diff <commit_hash> # shows defference between previous and new change to the files in specific commit timeline.
  - git branch # lists all of the local branches.
  - git branch -a # checking all the branches that are local and remote.
  - git branch <name> # create new branch.
  - git checkout <branch_name> # checking out in new branch.
  - git checkout -b <branch_name> # creating and checking out in new branch at the same time.
  - git checkout <origin/branch_name> # to take a quick peek at an upstream branch, check it out directly.
  - git checkout <remote_branch_name> # creating local branch from remote branch to work with it.
  - git branch --merged # checking out if there, any branch merged with the master.
  - git merge <branch_name> # merging branch with the master.
  - git branch -d <branch_name> # to delete a local branch.
  - git push origin -d <branch_name> # to delete a branch from remote.
  - git push -u origin <branch_name> # pushing a new local branch into remote repository. "-u" stands for upstream.
  - git pull origin <branch_name> # checking the remote repository branch, if it is updated.
  - git push origin <branch_name> # pushing file into the remote repository branch.


troubleshooting:
  - git config --bool core.bare true # When remote repository is non-bare. This command have to execute in the remote repository.
  - rm -f .git/index.lock | .git/ORIG_HEAD.lock # if there is showing error because of index or ORIG_HEAD .lock file.


resources:
  - Pro Git
