# Python Documentation

Python Data Types:

  Text Type:
    - str

  Numeric Types:
    # Integer takes less and floating uses more space in the memory.
    - int, float, complex

  Boolean Type:
    - bool

  Sequence Types:
    - list, tuple, range

  Mapping Type:
    - dict

  Set Types:
    - set, frozenset

  Binary Types:
    - bytes, bytearray, memoryview


Sppecial Value:
  - None


Reserved Keywords:
  - False      await      else       import     pass
  - None       break      except     in         raise
  - True       class      finally    is         return
  - and        continue   for        lambda     try
  - as         def        from       nonlocal   while
  - assert     del        global     not        with
  - async      elif       if         or         yield


Operators:
  # The ternary operator in Python allows to quickly define a conditional.
  - =   # Assignment operator, use to assign value to a variable. Assignment operator can be used with arithmetic operator to function as augmented operator.
  - is  # An identity operator. It is used to compare two objects and returns true if both are the same object.
  - in  # Called the membership operator. Used to tell if a value is contained in a list, or another sequence.

  Boolean Operators:
    # Operations that can be applied to boolean values themselves also called as logical operators.
    - and
    - or  # Used in an expression returns the value of the first operand that is not a falsy value. Otherwise it returns the last operand.
    - not

  Arithmetic Operators:
    # PEMDAS acronym to calculate math, Order matters in division and multiplication.
    - (+) Addition
    - (-) Subtruction
    - (*) Multiplication
    - (/) Division
    - (**) Exponantiation
    - (//) Floor Division
    - (%) Modulus/Remainder

  Comparison Operators:
    - ==, !=, >, <, >=, <= # These operators can be use to get boolean values.

  Bitwise Operators:
    # Operators that are used to work on bits and binary numbers.
    - (&) performs binary AND
    - (|) performs binary OR
    - (^) performs binary XOR
    - (~) performs binary NOT
    - (<<) shift left operation
    - (>>) shift right operation


String AND it's Methods:
  # A string can be multi-line when defined with a special syntax, enclosing the string in a set of 3 quotes also called as docstring.
  # Any number, boolean can be converted into str using the str() class constructor.
  # None of the string methods alter the original string, they just return a modified new string.
  # Escape charcters in string commonly used as \\, \", \n, \t.
  # Given a string, characters using square brackets to get a specific item, given its index, starting from 0. Using a negative number will start counting from the end also range can be used what we call slicing.
  # template.format(args) method can be used with string templates to pass values inside a string.
  - str.isalpha() # Return True if all characters in the string are alphabetic and there is at least one character, False otherwise.
  - str.isalnum() # Return True if all characters in the string are alphanumeric and there is at least one character, False otherwise.
  - str.isdecimal() # Return True if all characters in the string are decimal characters and there is at least one character, False otherwise.
  - str.lower() # To get a lowercase version of a string.
  - str.upper() # To get an uppercase version of a string.
  - str.islower() # To check if a string is lowercase.
  - str.isupper() # To check if a string is uppercase.
  - str.title() # Return a titlecased version of the string where words start with an uppercase character and the remaining characters are lowercase.
  - str.startswith(arg) # Return True if string starts with the prefix, otherwise return False.
  - str.endswith(arg) # To check if the string ends with a specific substring.
  - str.replace(arg, arg) # To replace a part of a string.
  - str.split(arg) # Return a list of the words in the string by split a string on a specific character separator.
  - str.strip() # To trim the whitespace from a string.
  - str.join(iterable) # Return a string which is the concatenation of the strings in iterable.
  - str.find(substr) # To find the position of a substring.
  

List Methods:
  # List can be referenced by their index[0] or slice[start:stop:step] to get or update their values. Like items[:] will give a copy of the list, items[::-1] will output a reverse copy of the list.
  # del keyword is handy to use with list to delete specifc index[] item or even the list itself.
  # += augmented operator can be used with list to update list values.
  - items.index(item) # Getting a items index number from a list.
  - items.append(item) # Adding new items to the end of the list.
  - items.extend([items]) # Adding multiple items in the end of the list.
  - items.insert(index, item) # Adding a item in a specific index number, it does move the entire sequence from that index but doesn't delete it.
  - items.remove(item) # Removing a speific item from the list by giving value.
  - items.pop(index) # Removes the sequence last item if the specific index not provided.
  - items.sort(reverse=True) # Sorting permanently items in a list. Sorting modifies the original list to avoid this using slice[:] copying the original list to new list.


Tuples:
  # Data are immutable, once created items cannot be removed or added.
  # Shares some list methods like slicing and getting index of specific item.
  # Greate use is that it can be unpacked it's items and used with variable.
  # A new tuple can be created with existing tuple and some new value concatenate with it, for a new single value there has to be a comma at the end of the item.
  # Tuples can be nested with list and dictionary types also be update by accessing it.
  # Tuples can be used with strings by substituting them with %s followed by % and the tuple in the end.
  

Ranges:
  # Ranges work just like the slices, range(start, end, step).
  # Ranges are exclusive, it means it will not include the end value and if the start value isn't defined it starts with 0.
  # Memory efficient, takes less space in the memory.


Dictionary:
  # Dictionaries can be used together with dict[] to get out/update values or even adding a new key, value pair. 
  - dict.get(key) # Method takes a key as argument and retrieves it value.
  - dict.keys() # Retrieves keys of a dictionary.
  - dict.values() # Retrieve values of a dictionary.
  - dict.items() # Retrieve items from a dictionary and return a list of tuples.
  - dict.clear()  # Clears everything out from a dictionary.
  - dict.pop(key) # Retrieves the value of a key, and subsequently deletes the item from the dictionary.


Control Statements:
  # "pass" is a useful keyword to use with statements. Like using with "else" to not throughing an error.


Loops:
  # "continue" and "break" both can be used with loops. continue stops the current iteration and tells Python to execute the next one. break stops the loop altogether, and goes on with the next instruction after the loop end.
  # Not using lists inside a for loop, it is best to use while loop then.


Functions:
  # Order matters in positional arguments but when passing value in keyword argument for positional arguments then it doesn't matter.
  # Functions can have one or more parameters with default value. (param=default_value)
  # *args gathers all remaining arguments as a tuple in function parameter. For passing list/tuple or variable as a argument, using * before the var/list/tuple. This is called unpacking.
  # **kwargs gathers remaining arguments as a dictionary in function parameter. For passing ditionary of data or variable as a argument, using ** before the dictionary or variable. This is also called unpacking.
  
  Mixing Parameter Order in Function:
    - parameters
    - *args
    - default parameters
    - **kwargs
    
  
  Built-in Functions:
    - abs() # Returns absolute value of a number.
    - round(number, ndigits=None) # Return number rounded to ndigits precision after the decimal point.
    - enumerate(iterable, start=0) # Returns an enumerate object with index. iterable must be a sequence, an iterator, or some other object which supports iteration.
    - input(prompt) # Takes input from the user as string. Displayes prompt if anything specified in the function.
    - len(s) # Returns the length (the number of items) of an object.
    - sorted(iterable, reverse=False) # Return a new sorted list from the items in iterable, can be performed with reverse order.
    - type() # With one argument, returns the type of an object. 
    - zip(*iterables, strict=False) # Iterate over several iterables in parallel, producing tuples with an item from each one.

  - """docstring""" # to write documentation inside a function or class.
  - func/class_name.__doc__  # to read a function or class documention.
  - from, import, as # Frequently used keywords with functions and classes for making module.
  - lambda [parameters]: expression # An anonymous inline function consisting of a single expression which is evaluated when the function is called.
  # Global variable data can be read from a function but can't perform write.


Classes:
  # The OOP principles are Encapsulation, Abstraction, Inheritance, Polymorphism.
  # Everything in python is object and class is to create types. An object is instance of a class.
  # Classes can inherit properties and methods from other classes by giving a class name as parameter to another class.
  # Classes also can be invoked from another class's attribute, this is called composition.
  # In python special methods are invoked automatically when conditions are met.
  # Polymorphism refers to a subclass's ability to adapt a method that already exists in its superclass to meet its needs.
  # If an abstract method is declared in a superclass, subclasses that inherit from the superclass must have their own implementation of the method.
  - __init__()  # Constructors, special methods that are called when an object is created, using __init__ method.
  - __repr__() # is a special method used to define a string representation of an object. 
  - super() # is a special function which allows to call a method from parent class.


  
Modules:
  # Modules can be imported from seperate sub-directory by creating a empty __init__.py file in the sub-dir location.
  # "import, from, as" are common keywords that frequently used in modules.

  random:
    - randint(num1, num2) # Takes 2 number argument and returns randomly among them, including the arguments.
    - choice(seq) # Takes a list or tuple of data and choices one.
    - shuffle(list) # Shuffles a list of items.
    - sample(list) # Takes a sample from the list.
  
  # File I/O operations.
  pathlib:
    - Path() # Takes a file path.
    - Path().exists() # Checks file path and returns boolean.
    - read_text() # Reads text file content.
    - write_text() # Writes contents to a text file.
    - rstrip() # returns a copy of the string with trailing characters removed (based on the string argument passed). If no argument is passed, it removes trailing spaces.
    - lstrip() # returns a copy of the string with leading characters removed (based on the string argument passed). If no argument is passed, it removes leading spaces.
    - splitlines() # Splits lines from a file and returns a list.

    json:
      json.loads(str) # Load JSON string to python formatted data.
      json.dumps(data, indent=4) # Dump python formatted data into JSON string.


  PIP (Python Package Manager):
  - python -m pip install [package_name] # Install a package.
  - pip install --upgrade pip # Update the pip.
  - pip list # Check all the packages.
  - pip list --outdated # Check outdated packages.
  - pip install --upgrade [package_name] # Update a specific package.
  - (pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U) # Upgrade all the python packages with pip.
  - pip --help # Show help for pip packages.

    venv:
      - python -m venv .venv # Create virtual environment.
      - source .venv/bin/activate # Activate the environment.
      - deactivate # Deactivate the environment.
      - pip freeze > requirements.txt # Export all installed packages and their version to requirements file.
      - pip install -r requirements.txt # Install required packages from the requirements file.

    pytest:
      # The name of a test file is important; it must start with test_. When we ask pytest to run the tests we’ve written, it will look for any file that begins with test_, and run all of the tests it finds in that file.
      # Any function that starts with test_ will be discovered by pytest, and will be run as part of the testing process.
